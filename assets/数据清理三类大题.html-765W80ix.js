import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as t,a}from"./app-Oc9BLI1-.js";const e="/notes-image/%E5%88%86%E7%AE%B1.png",n="/notes-image/%E7%AD%89%E6%B7%B1.png",r="/notes-image/%E7%AD%89%E5%AE%BD.png",o="/notes-image/%E6%9C%80%E5%B0%8F%E6%9C%80%E5%A4%A7%E8%A7%84%E8%8C%83.png",p="/notes-image/PCA.png",l="/notes-image/PCA%E8%BF%87%E7%A8%8B1.png",g="/notes-image/PCA%E8%BF%87%E7%A8%8B2.png",h="/notes-image/Apriori%E7%AE%97%E6%B3%95.png",d="/notes-image/Apriori%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%90.png",c="/notes-image/Apriori%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%902.png",m="/notes-image/Apriori%E7%AE%97%E6%B3%95%E4%BE%8B%E5%AD%903.png",k="/notes-image/FP_growth1.png",b="/notes-image/FP_growth2.png",A="/notes-image/FP_growth3.png",u="/notes-image/FP_growth4.png",_={},E=a('<h2 id="数据清理-由于讲的太多-而且难以详细整理-故而只能迫于应试而只记录做题方法" tabindex="-1"><a class="header-anchor" href="#数据清理-由于讲的太多-而且难以详细整理-故而只能迫于应试而只记录做题方法"><span>数据清理：（由于讲的太多，而且难以详细整理，故而只能迫于应试而只记录做题方法）</span></a></h2><p>一.清理噪声数据步骤：<br> 1.步骤<br><img src="'+e+'" alt="分箱" loading="lazy"><br> 2.类型：<br><img src="'+n+'" alt="等深" loading="lazy"><br><img src="'+r+'" alt="等宽" loading="lazy"><br> 3.练习：</p><ul><li><p>1.已知一组价格数据：10、19、26、12、7、21、15、36、27、42、38、<br> 3、16、30，现用等深（深度为5）分箱方法对其进行平滑（向下取整）。</p></li><li><p>2.已知一组价格数据： 10、19、26、12、7、21、15、36、27、42、38、<br> 3、16、30 ，现用等宽（宽度为10）分箱方法对其进行平滑（向下取整）。</p></li></ul><p>4.总结：<br> 先排序，再分箱，然后平滑。<br><strong><mark>深度即数量，宽度即距离</mark></strong></p><h2 id="二-数据变换—规范化" tabindex="-1"><a class="header-anchor" href="#二-数据变换—规范化"><span>二.数据变换—规范化</span></a></h2><p>数据规范化：将数据按比例缩放至一个小的特定区间：<br> 1）最小—最大规范化：假定minA和maxA分别为属性A的最小和最大值，<br> 则通过下面公式将A的值映射到区间[new_min, new_max]中的v’：<br><img src="'+o+`" alt="最小最大规范" loading="lazy"><br> 例：假定属性income的最小与最大值分别为$12000和$98000，可根据最<br> 小—最大规范化方法将其范围映射到[0,1]，如：属性值$73600将变换为：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">73600</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)/(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">98000</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)]*(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1-0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)+</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">0.716</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>ps：另两种见PPT</p><h2 id="三-数据归约pca" tabindex="-1"><a class="header-anchor" href="#三-数据归约pca"><span>三.数据归约PCA：</span></a></h2><p>（1）计算步骤：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1.计算均值</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2.将原数据列向量化，然后将矩阵零均值化（每个数都减去对应的均值）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3.根据公式算出协方差</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">4.计算特征值以及特征向量</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">5.确定贡献率，选择大的那个对应的特征向量</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">6.将原数据投影到新的基（特征向量横着写与一开始的矩阵相乘）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）例题：<br><img src="`+p+'" alt="PCA" loading="lazy"><br><img src="'+l+'" alt="PCA" loading="lazy"><br><img src="'+g+'" alt="PCA" loading="lazy"><br><strong><mark>注：解答最后答案是错的，正确答案是[-3,-1.0,3,1]</mark></strong></p><p>ps：此外还有一些简单概念，例如3-4-5规则这类，详见PPT</p><h2 id="四-关联规则挖掘" tabindex="-1"><a class="header-anchor" href="#四-关联规则挖掘"><span>四.关联规则挖掘</span></a></h2><h3 id="_1-apriori算法" tabindex="-1"><a class="header-anchor" href="#_1-apriori算法"><span>1.Apriori算法：</span></a></h3><ul><li><p>步骤：<br><img src="'+h+'" alt="Apriori算法" loading="lazy"></p></li><li><p>例子：<br><img src="'+d+'" alt="Apriori算法例子" loading="lazy"><br><img src="'+c+'" alt="Apriori算法例子" loading="lazy"><br><img src="'+m+'" alt="Apriori算法例子" loading="lazy"></p></li></ul><h3 id="_2-fp-growth算法" tabindex="-1"><a class="header-anchor" href="#_2-fp-growth算法"><span>2.FP Growth算法：</span></a></h3><p>一.FP-growth算法发现频繁项集的过程：<br> (1)构建FP树；<br> (2)从FP树中挖掘频繁项集。<br><code>FP-Tree</code>：将事务数据表中的各个事务数据项按照<mark>支持度</mark>计数排序后，把每个事<br> 务中的数据项按支持度计数的降序依次插入到一棵以<code>NULL</code>为根结点的树中，<br> 同时在每个结点处记录该结点出现的支持度。<br><code>条件模式基</code>：包含在FP-Tree中与后缀模式一起出现的前缀路径的集合，也就是<br> 同一个频繁项在FP树中的所有节点的祖先路径的集合。<br><code>条件树</code>：将条件模式基按照FP-Tree的构造原则形成的一个新的FP-Tree子树。<br> 二.例子：<br><img src="'+k+'" alt="FP_growth算法例子" loading="lazy"><br> 步骤一：<br><img src="'+b+'" alt="FP_growth算法例子" loading="lazy"><br> 步骤二：<br><img src="'+A+'" alt="FP_growth算法例子" loading="lazy"><br> 步骤三：<br><img src="'+u+'" alt="FP_growth算法例子" loading="lazy"></p>',18),F=[E];function y(B,P){return t(),s("div",null,F)}const f=i(_,[["render",y],["__file","数据清理三类大题.html.vue"]]),C=JSON.parse('{"path":"/notes/Datamining/%E6%95%B0%E6%8D%AE%E6%B8%85%E7%90%86%E4%B8%89%E7%B1%BB%E5%A4%A7%E9%A2%98.html","title":"数据清理三类大题","lang":"zh-CN","frontmatter":{"title":"数据清理三类大题","icon":"asterisk","order":2,"tag":"Data mining","description":"数据清理：（由于讲的太多，而且难以详细整理，故而只能迫于应试而只记录做题方法） 一.清理噪声数据步骤： 1.步骤 分箱 2.类型： 等深 等宽 3.练习： 1.已知一组价格数据：10、19、26、12、7、21、15、36、27、42、38、 3、16、30，现用等深（深度为5）分箱方法对其进行平滑（向下取整）。 2.已知一组价格数据： 10、19、2...","head":[["meta",{"property":"og:url","content":"https://gunksd.github.io/notes/Datamining/%E6%95%B0%E6%8D%AE%E6%B8%85%E7%90%86%E4%B8%89%E7%B1%BB%E5%A4%A7%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"本自热爱"}],["meta",{"property":"og:title","content":"数据清理三类大题"}],["meta",{"property":"og:description","content":"数据清理：（由于讲的太多，而且难以详细整理，故而只能迫于应试而只记录做题方法） 一.清理噪声数据步骤： 1.步骤 分箱 2.类型： 等深 等宽 3.练习： 1.已知一组价格数据：10、19、26、12、7、21、15、36、27、42、38、 3、16、30，现用等深（深度为5）分箱方法对其进行平滑（向下取整）。 2.已知一组价格数据： 10、19、2..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gunksd.github.io/notes-image/分箱.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-21T10:41:55.000Z"}],["meta",{"property":"article:author","content":"Awan"}],["meta",{"property":"article:tag","content":"Data mining"}],["meta",{"property":"article:modified_time","content":"2024-09-21T10:41:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据清理三类大题\\",\\"image\\":[\\"https://gunksd.github.io/notes-image/分箱.png\\",\\"https://gunksd.github.io/notes-image/等深.png\\",\\"https://gunksd.github.io/notes-image/等宽.png\\",\\"https://gunksd.github.io/notes-image/最小最大规范.png\\",\\"https://gunksd.github.io/notes-image/PCA.png\\",\\"https://gunksd.github.io/notes-image/PCA过程1.png\\",\\"https://gunksd.github.io/notes-image/PCA过程2.png\\",\\"https://gunksd.github.io/notes-image/Apriori算法.png\\",\\"https://gunksd.github.io/notes-image/Apriori算法例子.png\\",\\"https://gunksd.github.io/notes-image/Apriori算法例子2.png\\",\\"https://gunksd.github.io/notes-image/Apriori算法例子3.png\\",\\"https://gunksd.github.io/notes-image/FP_growth1.png\\",\\"https://gunksd.github.io/notes-image/FP_growth2.png\\",\\"https://gunksd.github.io/notes-image/FP_growth3.png\\",\\"https://gunksd.github.io/notes-image/FP_growth4.png\\"],\\"dateModified\\":\\"2024-09-21T10:41:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Awan\\",\\"url\\":\\"https://gunksd.github.io\\"}]}"]]},"headers":[{"level":2,"title":"数据清理：（由于讲的太多，而且难以详细整理，故而只能迫于应试而只记录做题方法）","slug":"数据清理-由于讲的太多-而且难以详细整理-故而只能迫于应试而只记录做题方法","link":"#数据清理-由于讲的太多-而且难以详细整理-故而只能迫于应试而只记录做题方法","children":[]},{"level":2,"title":"二.数据变换—规范化","slug":"二-数据变换—规范化","link":"#二-数据变换—规范化","children":[]},{"level":2,"title":"三.数据归约PCA：","slug":"三-数据归约pca","link":"#三-数据归约pca","children":[]},{"level":2,"title":"四.关联规则挖掘","slug":"四-关联规则挖掘","link":"#四-关联规则挖掘","children":[{"level":3,"title":"1.Apriori算法：","slug":"_1-apriori算法","link":"#_1-apriori算法","children":[]},{"level":3,"title":"2.FP Growth算法：","slug":"_2-fp-growth算法","link":"#_2-fp-growth算法","children":[]}]}],"git":{"createdTime":1724081899000,"updatedTime":1726915315000,"contributors":[{"name":"gunksd","email":"3056571032@qq.com","commits":1}]},"readingTime":{"minutes":2.85,"words":856},"filePathRelative":"notes/Datamining/数据清理三类大题.md","localizedDate":"2024年8月19日","autoDesc":true}');export{f as comp,C as data};
